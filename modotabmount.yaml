esphome:
  name: modotabmount
  friendly_name: Modo Tab Mount
  name_add_mac_suffix: true

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

logger:

api:

ota:
  - platform: esphome

wifi:
  ap:

captive_portal:

i2c:
  sda: 7
  scl: 21
  scan: true

debug:
  update_interval: 10s

globals:
  - id: previous_brightness
    type: float
    restore_value: no
    initial_value: '1.0'
  - id: previous_effect
    type: std::string
    restore_value: no
    initial_value: "\"\""
  - id: saved_brightness
    type: float
    restore_value: no
    initial_value: '1.0'
  - id: saved_effect
    type: std::string
    restore_value: no
    initial_value: "\"\""

switch:
  - platform: gpio
    id: tablet_charging
    pin: 6
    inverted: false
    name: "Tablet Charging"
    icon: "mdi:lightning-bolt-circle"

button:
  - platform: restart
    name: "Restart Device"

  - platform: factory_reset
    name: "Factory Reset Device"

light:
  - platform: esp32_rmt_led_strip
    id: addressable_led
    name: "LED"
    chipset: WS2812
    pin: GPIO5
    num_leds: 64
    rgb_order: GRB
    effects:
      - addressable_rainbow:
          name: Rainbow
      - addressable_color_wipe:
          name: Color Wipe
      - random:
          name: Random
      - pulse:
          name: Pulse
      - addressable_random_twinkle:
          name: Twinkle

interval:
  - interval: 3s
    then:
      - lambda: |-
          static bool throttled = false;
          auto power = id(ina219_power).state;
          auto led = id(addressable_led);
          if (!throttled && power > 10.0 && led->current_values.is_on()) {
            id(previous_brightness) = led->current_values.get_brightness();
            id(previous_effect) = led->get_effect_name().c_str();
            auto call = led->turn_on();
            call.set_brightness(0.5f);
            call.perform();
            throttled = true;
          } else if (throttled && id(led_power_low).state) {
            throttled = false;
            auto call = led->turn_on();
            if (id(previous_brightness) > 0.0f)
              call.set_brightness(id(previous_brightness));
            if (id(previous_effect).length() > 0)
              call.set_effect(id(previous_effect).c_str());
            call.perform();
          }

sensor:
  - platform: ina219
    address: 0x40
    shunt_resistance: 0.0767 ohm
    current:
      name: "Current"
    power:
      name: "Power"
      id: ina219_power
    bus_voltage:
      name: "Bus Voltage"
    shunt_voltage:
      name: "Shunt Voltage"
    max_voltage: 5.6V
    max_current: 2.7A
    update_interval: 3s

  - platform: internal_temperature
    name: "ESP32 Internal Temp"

  - platform: uptime
    name: "Uptime"
    type: seconds

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 180s

  - platform: template
    name: "Free Heap"
    lambda: |-
      return (float) ESP.getFreeHeap();
    update_interval: 10s
    unit_of_measurement: "bytes"

  - platform: template
    name: "Largest Free Block"
    lambda: |-
      return (float) heap_caps_get_largest_free_block(MALLOC_CAP_DEFAULT);
    update_interval: 10s
    unit_of_measurement: "bytes"

  - platform: template
    name: "Main Loop Time (ms)"
    lambda: |-
      static uint32_t last_time = 0;
      static float loop_ms = 0;
      uint32_t now = millis();
      if (last_time != 0) {
        loop_ms = (now - last_time);
      }
      last_time = now;
      return loop_ms;
    update_interval: 1s
    unit_of_measurement: "ms"

binary_sensor:
  - platform: template
    name: "Power Low Threshold"
    id: led_power_low
    internal: true
    lambda: |-
      return id(ina219_power).state < 7.5;
