esphome:
  name: modotabmount
  friendly_name: Modo Tab Mount
  name_add_mac_suffix: true

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

logger:
api:
ota:
  - platform: esphome

wifi:
  ap:

captive_portal:

web_server:
  port: 80

i2c:
  sda: 7
  scl: 21
  scan: true

globals:
  - id: previous_brightness
    type: float
    restore_value: no
    initial_value: '1.0'

  - id: previous_effect
    type: std::string
    restore_value: no
    initial_value: "\"\""

  - id: saved_brightness
    type: float
    restore_value: no
    initial_value: '1.0'

  - id: saved_effect
    type: std::string
    restore_value: no
    initial_value: "\"\""

  # For factory reset confirmation
  - id: factory_reset_confirmed
    type: bool
    restore_value: no
    initial_value: 'false'

  # For status message timeout tracking
  - id: status_message_timeout
    type: int
    restore_value: no
    initial_value: 0

  # For reusable message passing
  - id: show_status_message_msg
    type: std::string
    restore_value: no
    initial_value: ""

  - id: show_status_message_duration
    type: int
    restore_value: no
    initial_value: 30

# Multi-purpose status message system
text_sensor:
  - platform: template
    name: "Status Message"
    id: status_message

script:
  - id: show_status_message
    mode: queued
    then:
      - lambda: |-
          auto msg = id(show_status_message_msg);
          int duration = id(show_status_message_duration);
          id(status_message).publish_state(msg);
          id(status_message_timeout) = duration;
          // Clear after duration
          id(clear_status_message).execute_after(duration * 1000, {});

  - id: clear_status_message
    then:
      - text_sensor.template.publish:
          id: status_message
          state: ""
      - globals.set:
          id: status_message_timeout
          value: '0'

switch:
  - platform: gpio
    pin: 6
    inverted: false
    name: "Tablet Charging"
    icon: "mdi:lightning-bolt-circle"

  # Safe Factory Reset (2-step confirmation)
  - platform: template
    name: "Factory Reset"
    icon: mdi:alert
    turn_on_action:
      - if:
          condition:
            lambda: 'return id(factory_reset_confirmed);'
          then:
            - lambda: 'id(show_status_message_msg) = "✅ Factory reset initiated — device will restart."; id(show_status_message_duration) = 20; id(show_status_message).execute();'
            - delay: 2s
            - button.press: reset_button
          else:
            - lambda: 'id(show_status_message_msg) = "⚠️ Factory reset requested — press again within 30 s to confirm."; id(show_status_message_duration) = 30; id(show_status_message).execute();'
            - globals.set:
                id: factory_reset_confirmed
                value: 'true'
            - delay: 30s
            - globals.set:
                id: factory_reset_confirmed
                value: 'false'
            - text_sensor.template.publish:
                id: status_message
                state: ""

light:
  - platform: esp32_rmt_led_strip
    id: addressable_led
    name: "LED"
    chipset: WS2812
    pin: GPIO5
    num_leds: 64
    rgb_order: GRB
    effects:
      - addressable_rainbow:
          name: Rainbow
      - addressable_rainbow:
          name: Rainbow effect
          speed: 10
          width: 64
      - addressable_color_wipe:
          name: Color Wipe
      - random:
          name: Random
      - random:
          name: Random Effect
          transition_length: 5s
          update_interval: 7s
      - pulse:
          name: Pulse
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Slow Pulse"
          transition_length: 500ms
          update_interval: 2s
      - pulse:
          name: "Asymmetrical Pulse"
          transition_length:
            on_length: 1s
            off_length: 500ms
          update_interval: 1.5s
      - addressable_random_twinkle:
          name: Twinkle
      - addressable_random_twinkle:
          name: Random Twinkle Effect
          twinkle_probability: 5%
          progress_interval: 32ms

sensor:
  - platform: ina219
    address: 0x40
    shunt_resistance: 0.0767 ohm
    current:
      name: "Current"
    power:
      name: "Power"
      id: ina219_power
    bus_voltage:
      name: "Bus Voltage"
    shunt_voltage:
      name: "Shunt Voltage"
    max_voltage: 5.6V
    max_current: 2.7A
    update_interval: 3s

  - platform: internal_temperature
    name: "ESP32 Internal Temp"

  - platform: uptime
    name: "Uptime"
    type: seconds

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 180s

binary_sensor:
  - platform: template
    name: "Power Low Threshold"
    id: led_power_low
    lambda: |-
      return id(ina219_power).state < 7.5;
    internal: true

interval:
  - interval: 3s
    then:
      - lambda: |-
          static bool throttled = false;
          auto power = id(ina219_power).state;
          auto led = id(addressable_led);
          if (!throttled && power > 10.0 && led->current_values.is_on()) {
            id(previous_brightness) = led->current_values.get_brightness();
            id(previous_effect) = led->get_effect_name().c_str();
            auto call = led->turn_on();
            call.set_brightness(0.5f);
            call.perform();
            throttled = true;
          } else if (throttled && id(led_power_low).state) {
            throttled = false;
            auto call = led->turn_on();
            if (id(previous_brightness) > 0.0f)
              call.set_brightness(id(previous_brightness));
            if (id(previous_effect).length() > 0)
              call.set_effect(id(previous_effect).c_str());
            call.perform();
          }

button:
  - platform: factory_reset
    name: "Restart with Factory Default Settings"
    id: reset_button
