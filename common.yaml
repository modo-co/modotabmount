esphome:
  name: modotabmount
  friendly_name: Modo Tab Mount
  name_add_mac_suffix: true
  project:
    name: modoco.modotabmount
    version: "${version}"

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

logger:
api:
ota:
  - platform: esphome
    password: "your-ota-password"
  - platform: http_request
    id: ota_http_request

wifi:
  ap:
captive_portal:

http_request:
  buffer_size_rx: 2048
  buffer_size_tx: 2048

i2c:
  sda: 7
  scl: 21
  scan: true

globals:
  - id: previous_brightness
    type: float
    restore_value: no
    initial_value: '1.0'
  - id: previous_effect
    type: std::string
    restore_value: no
    initial_value: '""'
  - id: saved_brightness
    type: float
    restore_value: no
    initial_value: '1.0'
  - id: saved_effect
    type: std::string
    restore_value: no
    initial_value: '""'
  - id: factory_reset_confirmed
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: show_status_message_msg
    type: std::string
    restore_value: no
    initial_value: '""'
  - id: show_status_message_duration
    type: int
    restore_value: no
    initial_value: '30'
  - id: firmware_type
    type: std::string
    restore_value: no
    initial_value: '"default"'

text_sensor:
  - platform: template
    name: "Status Message"
    id: status_message

script:
  - id: show_status_message
    mode: queued
    then:
      - lambda: |-
          id(status_message).publish_state(id(show_status_message_msg));
      - delay: !lambda 'return id(show_status_message_duration) * 1000;'
      - text_sensor.template.publish:
          id: status_message
          state: ""

switch:
  - platform: gpio
    id: tablet_charging
    pin: 6
    inverted: false
    name: "Tablet Charging"
    icon: "mdi:lightning-bolt-circle"

button:
  - platform: restart
    name: "Restart Device"
    id: restart_button
    on_press:
      - lambda: |-
          id(show_status_message_msg) = "ðŸ”„ Restarting device...";
          id(show_status_message_duration) = 10;
      - script.execute: show_status_message
      - delay: 2s
      - switch.turn_off: tablet_charging
      - delay: 500ms
      - button.press: builtin_restart

  - platform: restart
    id: builtin_restart
    internal: true

light:
  - platform: esp32_rmt_led_strip
    id: addressable_led
    name: "LED"
    chipset: WS2812
    pin: GPIO5
    num_leds: 64
    rgb_order: GRB
    effects:
      - addressable_rainbow:
          name: Rainbow
      - addressable_color_wipe:
          name: Color Wipe
      - random:
          name: Random
      - pulse:
          name: Pulse
      - addressable_random_twinkle:
          name: Twinkle

sensor:
  - platform: ina219
    address: 0x40
    shunt_resistance: 0.0767 ohm
    current:
      name: "Current"
    power:
      name: "Power"
      id: ina219_power
    bus_voltage:
      name: "Bus Voltage"
    shunt_voltage:
      name: "Shunt Voltage"
    max_voltage: 5.6V
    max_current: 2.7A
    update_interval: 3s

  - platform: internal_temperature
    name: "ESP32 Internal Temp"

  - platform: uptime
    name: "Uptime"
    type: seconds

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 180s

binary_sensor:
  - platform: template
    name: "Power Low Threshold"
    id: led_power_low
    internal: true
    lambda: |-
      return id(ina219_power).state < 7.5;

interval:
  - interval: 3s
    then:
      - lambda: |-
          static bool throttled = false;
          auto power = id(ina219_power).state;
          auto led = id(addressable_led);
          if (!throttled && power > 10.0 && led->current_values.is_on()) {
            id(previous_brightness) = led->current_values.get_brightness();
            id(previous_effect) = led->get_effect_name().c_str();
            auto call = id(addressable_led)->turn_on();
            call.set_brightness(0.5f);
            call.perform();
            throttled = true;
          } else if (throttled && id(led_power_low).state) {
            throttled = false;
            auto call = id(addressable_led)->turn_on();
            if (id(previous_brightness) > 0.0f)
              call.set_brightness(id(previous_brightness));
            if (id(previous_effect).length() > 0)
              call.set_effect(id(previous_effect).c_str());
            call.perform();
          }
